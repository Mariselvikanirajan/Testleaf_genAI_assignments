Assigment on Saturday (Oct 11, 2025):
-----------------------------------
- Take one of your office/retail application DOM structure,convert into selenium /playwright / cypress code 
- You are going to write prompt to convert selenium to playwright typescript	
- Once you convert, you need to copy to this URL and run !

https://try.playwright.tech/?l=playwright-test

Hint: Use ICE POT framework to generate !! 

Note: 

- The selenium code should be working code 

sample code available in below repository

https://github.com/TestLeafInc/TestLeafSeleniumTraining/tree/main/week2/day1



Instructions:
------------
Convert the provided Selenium Java test script into an equivalent Playwright TypeScript test.
Verify the Login functionality of the "Wasabi Account Control Manager" web application.
Include positive and negative test cases:
Prefer ID for element locators.
If ID is not present, use Name.
If both are missing, use XPath.
Ensure compatibility with Chrome, Edge, and Firefox browsers.
The code should include clear comments and follow TypeScript standards.
Base URL: https://qa2.wacm.wasabibeta.com

DOM structure:
----------------
<input type="text" placeholder="Username or Email Address" name="username" data-testid="username-testid">
<input type="password" placeholder="Password" name="password" data-testid="password-testid">
<button type="submit" data-testid="login-button-testid">Sign In</button>

Input (Selenium Java):
-------------------------
package wasabi;

import java.time.Duration;
import org.openqa.selenium.*;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.*;
import io.github.bonigarcia.wdm.WebDriverManager;

public class App {
    public static void main(String[] args) {

        WebDriverManager.chromedriver().setup();
        WebDriver driver = new ChromeDriver();

        try {
            // Step 1: Open URL and maximize window
            driver.get("https://wacm.wasabibeta.com");
            driver.manage().window().maximize();

            // Step 2: Set up explicit wait
            WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));

            // Step 3: Wait for username input to be visible
            WebElement username = wait.until(ExpectedConditions.visibilityOfElementLocated(
                By.xpath("//input[@name='username' and @placeholder='Username or Email Address']")
            ));

            // Step 4: Use JavaScript to ensure field is interactable
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", username);
            ((JavascriptExecutor) driver).executeScript("arguments[0].click();", username);
            username.sendKeys("mmariselvi.ext+qa2@wasabi.com");

            // Step 5: Wait for password input
            WebElement password = wait.until(ExpectedConditions.visibilityOfElementLocated(
                By.xpath("//input[@name='password' and @placeholder='Password']")
            ));
            ((JavascriptExecutor) driver).executeScript("arguments[0].click();", password);
            password.sendKeys("Password@123");

            // Step 6: Wait for Sign In button (Angular enables it dynamically)
            WebElement signIn = wait.until(ExpectedConditions.elementToBeClickable(
                By.xpath("//button[contains(text(),'Sign In') and not(@disabled)]")
            ));

            // Step 7: Click Sign In using JS for Angular safety
            ((JavascriptExecutor) driver).executeScript("arguments[0].click();", signIn);

            // Step 8: Wait for navigation to dashboard
            wait.until(ExpectedConditions.urlContains("dashboard"));
            System.out.println("✅ Login Successful!");

        } catch (Exception e) {
            System.out.println("❌ Login Failed: " + e.getMessage());
        } finally {
            driver.quit();
        }
    }
}

Context:
--------------
You are an expert Test Automation Engineer converting Selenium to Playwright.
You are specialized in JAVA

Persona:
---------
Act as a Senior QA Engineer reviewing the final script.

Output:
---------
Provide only the final Playwright TypeScript code, no explanations.
Code must be clean, modular, and browser-compatible.
Include both positive and negative test cases for login validation.

Example:
----------
package week2.day1;

import java.time.Duration;

import org.openqa.selenium.By;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class Login {
	
	public static void main(String[] args) {
		/*
		 * Selenium Internal Architecture:
		 * 
		 * Selenium (Java) -> REST API -> ChromeDriver (binary) -> Chrome
		 * ChromeDriver -> Local Server which is built on Js, Python -> Google
		 * GeckoDriver -> Local Server Js, C++ -> Mozilla
		 * Selenium (Java) -> REST API -> GeckoDriver (binary) -> Firefox
		 * 
		 * Selenium (C#) -> REST API -> ChromeDriver (binary) -> Chrome\
		 * 
		 * Selenium Java + REST API is bundled inside the Jar File
		 * ChromeDriver -> Automate the download -> webdrivermanager 
		 * Chrome 89 -> Chrome 89 driver
		 * Chrome 89 + Mac -> Different DRIVER
		 * 
		 */
		
		/*
		 * Preconditions:
		 * 1) Selenium Java Software (
		 * 2) Browser Driver
		 * 
		 * 
		 * 
		 * Create a new package 
		 * Create a new class -> Login
		 * 
		 */
		
		// Step 0) Setup the chromedriver using webdrivermanager software
		WebDriverManager.chromedriver().setup(); // .exe or binary
		
		// Step 1) Launch the chrome browser (Class Name -> ChromeDriver)
		ChromeDriver driver = new ChromeDriver();
		
		// Step 2) Load the URL (http://leaftaps.com/opentaps/control/main) -> get
		driver.get("http://leaftaps.com/opentaps");
		
		// Step 2b) Add common time to wait for all/any elements to load (Write once)
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(15));
		
		// Step 3) Maximize the chrome browser
		driver.manage().window().maximize();
		
		// Step 4) Find the username and type the value (DemoSalesManager)
		driver.findElement(By.id("username1")).sendKeys("DemoSalesManager");
		
		// Step 5) Find the password and type the value (crmsfa)
		driver.findElement(By.id("password")).sendKeys("crmsfa");	
		
		// Step 6) Find the login button and click
		driver.findElement(By.className("decorativeSubmit")).click();
		
		// Step 7) Verify the title 
		String title = driver.getTitle();
		System.out.println(title);

	}

}